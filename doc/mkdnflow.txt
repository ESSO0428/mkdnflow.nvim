*Mkdnflow.nvim* Tools for markdown notebook navigation and management

===============================================================================
CONTENTS                                                        *Mkdnflow-help*

  Description.............................|Mkdnflow-description|
  Commands................................|Mkdnflow-commands|
  Features................................|Mkdnflow-features|
  Caveats and warnings....................|Mkdnflow-caveats|
  Lua functions...........................|Mkdnflow-lua-functions|
  Configuration...........................|Mkdnflow-configuration|
  Mappings................................|Mkdnflow-mappings|
  Recommended vim settings................|Mkdnflow-recommended-vim-settings|
  Credits.................................|Mkdnflow-credits|
  References..............................|Mkdnflow-references|

===============================================================================
Description                                              *Mkdnflow-description*

This plugin is designed to replicate the features I use most from Vimwiki,
implementing them in Lua instead of VimL. It is a set of functions and
keybindings (optional, but enabled by default) that make it easy to navigate
and manipulate personal markdown notebooks/journals/wikis in Neovim.

If you have a suggestion or problem with anything, file an issue; or if you'd
like to contribute, work on a fork of this repo and submit a pull request.

===============================================================================
Commands                                                    *Mkdnflow-commands*

Mkdnflow provides the following commands for interacting with the contents of 
markdown files:

:MkdnNextLink
  Move cursor to the beginning of the next link (if there is a next link).

:MkdnPrevLink
  Move the cursor to the beginning of the previous link (if there is one).

:MkdnNextHeading
  Move the cursor to the next heading in the document (if there is one).

:MkdnPrevHeading
  Move the cursor to the previous heading in the document (if there is one).

:MkdnGoBack
  Open the last-active buffer in the current window.

:MkdnFollowPath
  Open the link under the cursor, creating missing directories if desired, or
  if there is no link under the cursor, make a link from the word under the
  cursor.

:MkdnGetPath
  With a link under the cursor, extract (and return) just the path part of it
  (i.e. the part in parentheses, following the brackets).

:MkdnCreateLink
  Replace the word under the cursor with a link in which the word under the
  cursor is the name of the link.

:MkdnYankAnchorLink
  Add a formatted anchor link to the unnamed register (clipboard) if the curre-
  nt line that the cursor is on is a heading.

:MkdnIncreaseHeading
  Increase heading importance (remove hashes).

:MkdnDecreaseHeading
  Decrease heading importance (add hashes).

:Mkdnflow
  Manually start Mkdnflow.

===============================================================================
Features                                                    *Mkdnflow-features*

Create links from the word under the cursor (mapped to `<CR>` by default)
  - The default filename provided for the path prefixes the word under the
    cursor with the date in `YYYY-MM-DD` format: `YYYY-MM-DD_<word>.md`. The
    prefix can be changed. See |Mkdnflow-configuration|.

Create links from a visual selection (mapped to `<CR>` by default)
  - If visual selection begins with a hash, an anchor link will be created. Ot-
  herwise, a link to a markdown document named after the visual selection will
  be created.

Jump to the next or previous link in the file (mapped to `<Tab>` and `<S-Tab>`
by default, respectively)

Jump to the next or previous heading in the file (mapped to `<leader>]` and
`<leader>[`, respectively)

Follow links relative to the first-opened file or the current file (mapped to
`<CR>` by default)
  - `<CR>`ing on a link to any kind of text file will open it (i.e.
    `:e <filename>`)
  - `<CR>`ing on a link to a file tagged with `file:` (formerly local:), e.g.
    [My Xournal notes](file:notes.xopp), will open that file with whatever the
    system's associated program is for that filetype (using `xdg-open` on Linux
    and `open` on macOS)
  - `<CR>`ing on a link to a web URL will open that link in your default browser

Act on citations (mapped to `<CR>` by default) if `default_bib_path` is specif-
ied in the table passed to the setup function (see |Mkdnflow-configuration|)
  - If a citation key is found and has a file associated with it, Mkdnflow tri-
  es to open the file. If there's no file and is a URL, Mkdnflow opens the URL
  in the default browser. If there's no URL and is a DOI, Mkdnflow opens the
  DOI in the default browser. Otherwise, no action is taken.

Yank a formatted anchor link if the line the cursor is currently on is a heading

Follow anchor links to the first-matching heading in the file

Create missing directories if a link goes to a file in a directory that doesn't
exist

`<BS>` to go to previous file/buffer opened in the window

Enable/disable default keybindings (see |Mkdnflow-configuration|) or specify
your own

===============================================================================
Caveats and warnings                                         *Mkdnflow-caveats*

The plugin won't start automatically if the first-opened file is not one of the
default or named extensions (see Configuration), but you can manually start the
plugin with the defined command `:MkdnFlow`.

On Windows, the plugin should successfully load, but the use of certain
functions will result in a message in the command line: Function unavailable
for Windows. The functionality currently unavailable for Windows includes:
  - Opening local files and URLs outside of Neovim
  - Following links within Neovim while create_dirs is enabled. If you are on
    Windows, you should set `create_dirs` to false and make sure that all
    directories you specify as part of a link already exist.


===============================================================================
Lua functions                                          *Mkdnflow-lua-functions*

Mkdnflow utilizes the following lua functions under the hood. The only one that
is intended to be used directly is the setup function. The functions following
that are utilized when the commands are called.

The following functions are defined in one of the files `init.lua`,
`files.lua`, or `cursor.lua` but are ultimately returned as part of the table
defined in `init.lua` for public use.

require('mkdnflow.init').setup(table)
  Initializes the plugin using a configuration specified in the argument (a
  table), but only if the filetype of the current buffer is matched in the list
  of filetypes specified in the table (or one of the defaults). Providing an
  empty table initializes the plugin using the defaults.

require('mkdnflow.init').forceStart()
  Initializes the plugin using a configuration specified in the argument (a
  table), regardless of what the current filetype is. Providing an empty table
  initializes the plugin using the defaults.

require('mkdnflow.files').createLink()
  Makes a link from the word under the cursor--or, if no word is under the
  cursor, produces the syntax for a md link: []({name}.md). Returns nothing
  via stdout, but inserts text into the vim buffer.

require('mkdnflow.files').followPath()
  Does something with the path in the link under the cursor. If the path is a
  filename, it creates the file specified in the path. If the path is a URL,
  it uses `path_handler()` to open the URL specified in the path. If the path
  is determined to be neither the filename for a text file nor a URL, it uses
  `path_handler()` to open a local file at the specified path via the system's
  default application for that filetype (if on macOS or Linux). Returns nothing.

require('mkdnflow.files').goBack()
  Uses the buffer stack to go to the last-opened buffer.

require('mkdnflow.cursor').toNextLink()
  Finds the next link in the file.

require('mkdnflow.cursor').toPrevLink()
  Finds the previous link in the file.

require('mkdnflow.cursor').changeHeadingLevel('increase')
  Increases heading level importance (removes hashes)

require('mkdnflow.cursor').changeHeadingLevel('decrease')
  Decreases heading level importance (adds hashes)

===============================================================================
Configuration                                          *Mkdnflow-configuration*

To use Mkdnflow with the default behavior, just call the setup function in your
init config and provide an empty table.

>
    require('mkdnflow').setup({})

To change Mkdnflow's behavior, you can change any of the following elements by
specifying a new value for them in the table passed to the setup function.

create_dirs
  Must be a boolean. If `true`, directories are created (recursively) if
  the link contains a missing directory. If `false`, missing directories are
  not created. Default: `true`.

links_relative_to
  Must be one of two strings. If `first`, link navigation proceeds relative to
  the directory of the first-opened file. If `current`, link navigation
  proceeds relative to the currently visible file. Default: `first`.

filetypes
  Must be a table of key-value pairs, where the key is the name of a filetype
  and the value is a boolean. The plugin's features are enabled only when one
  of these filetypes is opened; otherwise, the plugin does nothing unless it
  is manually started by calling `:Mkdnflow`. Default filetypes: `md`, `rmd`,
  and `markdown`.

evaluate_prefix
  Must be a boolean. When `true`, the `createLinks()` function tries to
  evaluate the string provided as the value of `new_file_prefix`. If `false`,
  the value of `new_file_prefix` is prefixed to new files as a string. That
  is, it is not evaluated. Default: `true`.

new_file_prefix
  Must be a string. Defines the prefix that should be used to create new links,
  either something static (if `evaluate_prefix` is `false`) or variable (if 
  `evaluate_prefix` is `true`). This is evaluated at the time `createLink()` is
  run, which is to say that it's run whenever <CR> is pressed (under the
  default mappings, anyway). This makes for many interesting possibilities, but
  should be used with caution. Default: `[[os.date('%Y-%m-%d_')]]`, which
  returns a string representing the current date to be prepended to the name
  of your file: `YYYY-mm-dd_`. This helps with the organization of the
  directory in which you keep your markdown files.

wrap_to_beginning
  Must be a boolean. If true, when jumping to the next link or heading in a doc,
  the search will proceed from the beginning of the document if there are no mo-
  re links between the current cursor position and the end of the document. De-
  fault: `false`

wrap_to_end
  Must be a boolean. If true, when jumping to the previous link or heading in a
  doc, the search will proceed from the end of the document if there are no more
  links between the current cursor position and the beginning of the document.
  Default: `false`.

default_bib_path
  Must be a string. Tells Mkdnflow where to find the .bib file to search for
  citation keys in.

use_mappings_table
  Must be a boolean. If `true` and nothing is specified for `mappings`, the def-
  ault mappings are used. If `true` and a table is passed under the `mappings`
  key, then default mappings are overridden if a value is provided in the table.
  If `false`, the default mappings are not used and you will have to specify yo-
  ur own outside of the setup function. Default: `true`.

mappings
  Must be a table of key-value pairs, where the key is the name of the command
  and the value is the key(s) to map the function to.


A sample config showing the defaults:~
>
    require('mkdnflow').setup({
        create_dirs = true,
        links_relative_to = 'first', -- other option: current
        filetypes = {md = true, rmd = true, markdown = true},
        new_file_prefix = [[os.date('%Y-%m-%d_')]],
        evaluate_prefix = true,
        wrap_to_beginning = false,
        wrap_to_end = false,
        default_bib_path = '',
        use_mappings_table = true,
        mappings = {
            MkdnNextLink = '<Tab>',
            MkdnPrevLink = '<S-Tab>',
            MkdnNextHeading = '<leader>]',
            MkdnPrevHeading = '<leader>[',
            MkdnGoBack = '<BS>',
            MkdnFollowPath = '<CR>',
            MkdnYankAnchorLink = 'ya'
        }
    })

===============================================================================
Mappings                                                    *Mkdnflow-mappings*

These are the default mappings. If you would like to disable them, see
|Mkdnflow-configuration|. NEW: Mappings can now be changed on a case-by-case
basis by passing a table value under the 'mappings' key in the setup function. 
For now, the old 'default_mappings' key is still respected. (If it is set to
false in your config, the default mappings below will not be loaded. Note, ho-
wever, that this will eventually be replaced by the new key `use_mappings_tabl-
e`.)

<Tab> (normal mode)
  Mapped to `:MkdnNextLink`. Moves the cursor to the beginning of the next
  link (if there is a next link). If `wrap_to_beginning` is true and there
  is no next link before the end of the file, will wrap to the beginnning of
  the file.

<S-Tab> (normal mode)
  Mapped to `:MkdnPrevLink`. Moves the cursor to the beginning of the previous
  link (if there is one). If `wrap_to_end` is true and there is no previous
  link before the beginning of the file, will wrap to the end of the file.

<BS> (normal mode)
  Mapped to `:MkdnGoBack`. Opens the last-active buffer in the current window.

<CR> (normal mode)
  Mapped to `:MkdnFollowPath`. If a link to a .md file is under the cursor, op-
  ens the link under the cursor, creating missing directories if desired. If
  there is a citation under the cursor, open any of the following (in order of
  priority): a file associated with the citation key, a website associated with
  the citation key, or a DOI associated with the citation key. If there is an
  anchor link under the cursor, jumps to a matching heading in the current file
  (if one exists). If there is no link under the cursor, make a link from the
  word under the cursor.

  When used in visual mode, <CR> does one of two things: creates a link to a .md
  file from the visual selection, or if the visual selection starts with a hash
  symbol, creates an anchor link to a heading of the name specified by the visu-
  al selection.

ya (normal mode)
  Mapped to `:MkdnYankAnchorLink`. If the cursor is on the same line as a headi-
  ng, a formatted link to that heading is added to the unnamed register (clipbo-
  ard).

<leader>] (normal mode)
  Mapped to `:MkdnNextHeading`. Moves the cursor to the next heading in the
  file.

<leader>[ (normal mode)
  Mapped to `:MkdnPrevHeading`. Moves the cursor to the previous heding in the
  file (if one exists).

===============================================================================
Recommended vim settings                    *Mkdnflow-recommended-vim-settings*

I recommend turning on `autowriteall`. This will ensure that changes to buffers
are saved when you navigate away from that buffer, e.g. by following a link to
another file. See `:h awa`.

===============================================================================
Credits                                                      *Mkdnflow-credits*

Mkdnflow is created and maintained by Jake Vincent <jakewvincent@gmail.com>,
and you are free to use and extend it. Please consider opening a pull request
if extended.

Source is located at https://github.com/jakewvincent/mkdnflow.nvim

===============================================================================
Resources                                                  *Mkdnflow-resources*

Plugins that would complement Mkdnflow:
  - Paste links to images in markdown syntax: https://github.com/ekickx/clipboard-image.nvim
  - Evaluate code blocks inside markdown documents: https://github.com/jubnzv/mdeval.nvim
  - Markdown document preview plugins:
    - https://github.com/iamcco/markdown-preview.nvim
    - https://github.com/davidgranstrom/nvim-markdown-preview
    - https://github.com/npxbr/glow.nvim
    - https://github.com/jghauser/auto-pandoc.nvim

A big list of plugins for Neovim: https://github.com/rockerBOO/awesome-neovim#markdown

Full-featured journal navigation/maintenance: https://github.com/vimwiki/vimwiki
